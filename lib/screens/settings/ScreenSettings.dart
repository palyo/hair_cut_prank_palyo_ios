import 'dart:async';import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:flutter_screenutil/flutter_screenutil.dart';import 'package:flutter_svg/svg.dart';import 'package:get/get.dart';import 'package:in_app_purchase/in_app_purchase.dart';import 'package:prankers/adModule/AdManager.dart';import 'package:prankers/adModule/InterAd.dart';import 'package:prankers/extensions/app_colors.dart';import 'package:prankers/extensions/app_text_styles.dart';import 'package:prankers/extensions/screen_size.dart';import 'package:prankers/languages/I10n/app_localizations.dart';import 'package:prankers/provider/MainController.dart';import 'package:prankers/screens/ScreenCategory.dart';import 'package:prankers/screens/ScreenLanguage.dart';import 'package:url_launcher/url_launcher.dart';class ScreenSettings extends StatefulWidget {  const ScreenSettings({super.key});  @override  State<ScreenSettings> createState() => _ScreenSettingsState();}class _ScreenSettingsState extends State<ScreenSettings> {  final InAppPurchase _inAppPurchase = InAppPurchase.instance;  StreamSubscription<List<PurchaseDetails>>? _subscription;  final controller = Get.find<MainController>();  List<ProductDetails> _products = [];  final Set<String> _productIds = {'HairPrankWeekly', 'HairPrankYearly'};  bool _isLoading = true;  bool _isPurchasing = false;  @override  void initState() {    super.initState();    _subscription = _inAppPurchase.purchaseStream.listen(      _handlePurchaseUpdates,      onDone: () => _subscription?.cancel(),      onError: (error) => debugPrint("Purchase stream error: $error"),    );    _initializeStore();  }  Future<void> _initializeStore() async {    if (!await _inAppPurchase.isAvailable()) {      debugPrint("Store is not available");      setState(() => _isLoading = false);      return;    }    final response = await _inAppPurchase.queryProductDetails(_productIds);    if (response.error != null) {      debugPrint("Error fetching products: ${response.error!.message}");    } else {      _products =          response.productDetails.toList()..sort((a, b) => a.rawPrice.compareTo(b.rawPrice));    }    setState(() => _isLoading = false);  }  void _handlePurchaseUpdates(List<PurchaseDetails> purchases) async {    for (final purchase in purchases) {      debugPrint("Purchase status: ${purchase.status}");      if ((purchase.status == PurchaseStatus.purchased ||              purchase.status == PurchaseStatus.restored) &&          _verifyPurchase(purchase)) {        await controller.setPremium(true);        if (purchase.pendingCompletePurchase) {          await _inAppPurchase.completePurchase(purchase);        }        if (mounted) {          ScaffoldMessenger.of(context).showSnackBar(            SnackBar(              content: Text(                "Purchase restored successfully!",                style: AppTextStyles.bodyText1(                  context,                ).copyWith(color: AppColors.cardText(context)),              ),              duration: Duration(seconds: 2),              behavior: SnackBarBehavior.floating,              backgroundColor: AppColors.card(context),            ),          );          Get.offAll(() => const ScreenCategory());        }      } else if (purchase.status == PurchaseStatus.error) {        final errorCode = purchase.error?.code ?? '';        final errorMsg = purchase.error?.message ?? '';        debugPrint("Purchase failed: [$errorCode] $errorMsg");        if (mounted) {          ScaffoldMessenger.of(context).showSnackBar(            SnackBar(              content: Text(                "Purchase failed or cancelled.",                style: AppTextStyles.bodyText1(                  context,                ).copyWith(color: AppColors.cardText(context)),              ),              duration: Duration(seconds: 2),              behavior: SnackBarBehavior.floating,              backgroundColor: AppColors.card(context),            ),          );        }        setState(() => _isPurchasing = false);      }    }  }  bool _verifyPurchase(PurchaseDetails purchase) =>      _productIds.contains(purchase.productID) &&      (purchase.status == PurchaseStatus.purchased || purchase.status == PurchaseStatus.restored);  void _restore() async {    setState(() => _isPurchasing = true);    if (mounted) {      ScaffoldMessenger.of(context).showSnackBar(        SnackBar(          content: Text(            "Checking for past purchases...",            style: AppTextStyles.bodyText1(context).copyWith(color: AppColors.cardText(context)),          ),          duration: Duration(seconds: 2),          behavior: SnackBarBehavior.floating,          backgroundColor: AppColors.card(context),        ),      );    }    try {      await _inAppPurchase.restorePurchases();    } on PlatformException catch (e) {      debugPrint("PlatformException: ${e.code} - ${e.message}");      if (e.code == 'storekit2_purchase_cancelled') {        debugPrint("User canceled the Apple login or purchase dialog.");      }      if (mounted) {        ScaffoldMessenger.of(context).showSnackBar(          SnackBar(            content: Text(              "Restore cancelled: ${e.message ?? ''}",              style: AppTextStyles.bodyText1(context).copyWith(color: AppColors.cardText(context)),            ),            duration: Duration(seconds: 2),            behavior: SnackBarBehavior.floating,            backgroundColor: AppColors.card(context),          ),        );      }      setState(() => _isPurchasing = false);    } catch (e) {      debugPrint("Unexpected restore error: $e");      if (mounted) {        ScaffoldMessenger.of(context).showSnackBar(          SnackBar(            content: Text(              "Something went wrong during restore.",              style: AppTextStyles.bodyText1(context).copyWith(color: AppColors.cardText(context)),            ),            duration: Duration(seconds: 2),            behavior: SnackBarBehavior.floating,            backgroundColor: AppColors.card(context),          ),        );      }      setState(() => _isPurchasing = false);    }    Future.delayed(Duration(seconds: 10), () {      if (mounted) {        ScaffoldMessenger.of(context).showSnackBar(          SnackBar(            content: Text(              "Something went wrong during restore.",              style: AppTextStyles.bodyText1(context).copyWith(color: AppColors.cardText(context)),            ),            duration: Duration(seconds: 2),            behavior: SnackBarBehavior.floating,            backgroundColor: AppColors.card(context),          ),        );      }      setState(() => _isPurchasing = false);    });  }  @override  void dispose() {    _subscription?.cancel();    super.dispose();  }  @override  Widget build(BuildContext context) {    return Obx(() {      return AnnotatedRegion<SystemUiOverlayStyle>(          value: const SystemUiOverlayStyle(            statusBarColor: Colors.transparent,            statusBarIconBrightness: Brightness.dark,            statusBarBrightness: Brightness.dark,          ),child: Scaffold(        backgroundColor: AppColors.background(context),        body: Stack(          children: [            Image.asset('assets/ic_player_background.webp', width: context.screenWidth, fit: BoxFit.cover),            Column(              crossAxisAlignment: CrossAxisAlignment.center,              children: [                Padding(                  padding: EdgeInsets.only(top: MediaQuery.of(context).padding.top, left: 12.sp),                  child: Row(                    mainAxisSize: MainAxisSize.max,                    mainAxisAlignment: MainAxisAlignment.start,                    children: [                      GestureDetector(                        onTap: () {                          Get.back();                        },                        child: Image.asset('assets/icons/ic_navigation_back.webp', width: 56.sp, height: 56.sp, fit: BoxFit.contain),                      ),                      SizedBox(width: 12.sp),                      Center(child: Text(AppLocalizations.of(context)?.title_settings??'', style: AppTextStyles.accentToolbarText(context))),                    ],                  ),                ),                SizedBox(height: 12.sp,),                buildAction(                  'ic_action_language',                  AppLocalizations.of(context)?.title_app_language ?? '',                  false,                  () {                    InterAd().showAd(context, () {                      Get.off(() => ScreenLanguage(isSettings: true));                    });                  },                ),                if (!controller.isPremium.value)                  buildAction(                    'ic_action_restore',                    AppLocalizations.of(context)?.action_restore_purchase ?? '',                    true,                    () {                      if (!_isPurchasing) _restore();                    },                  ),                buildAction(                  'ic_action_terms',                  AppLocalizations.of(context)?.action_terms_of_use ?? '',                  false,                  () => _launchUrl(AdManager.instance?.config?.termsOfUse??''),                ),                buildAction(                  'ic_action_privacy_policy',                  AppLocalizations.of(context)?.action_privacy_policy ?? '',                  false,                  () => _launchUrl(AdManager.instance?.config?.privacyPolicy??''),                ),              ],            ),          ],        ),      ));    });  }  Future<void> _launchUrl(String uri) async {    final url = Uri.parse(uri);    if (await canLaunchUrl(url)) {      await launchUrl(url, mode: LaunchMode.externalApplication);    } else {      debugPrint("Could not launch $uri");    }  }  Widget buildAction(String icon, String title, bool isProgress, Function() onTap) {    return Padding(      padding: EdgeInsets.only(bottom: 8.sp,left: 12.sp,right: 12.sp),      child: GestureDetector(        onTap: onTap,        child: Container(          padding: EdgeInsets.symmetric(vertical: 16.sp, horizontal: 16.sp),          decoration: BoxDecoration(            color: AppColors.card(context),            borderRadius: BorderRadius.circular(16),          ),          child: Row(            children: [              SvgPicture.asset(                'assets/icons/$icon.svg',                width: 24,                height: 24,                colorFilter: ColorFilter.mode(AppColors.text(context), BlendMode.srcIn),              ),              SizedBox(width: 16.sp),              Expanded(                child: Text(                  title,                  style: AppTextStyles.subheading3(context).copyWith(fontWeight: FontWeight.w500),                  overflow: TextOverflow.ellipsis,                ),              ),              isProgress && _isPurchasing                  ? Center(                    child: SizedBox(                      width: 20.sp,                      height: 20.sp,                      child: CircularProgressIndicator(                        color: AppColors.accent(context),                        strokeWidth: 2.sp,                      ),                    ),                  )                  : SizedBox.shrink(),            ],          ),        ),      ),    );  }}