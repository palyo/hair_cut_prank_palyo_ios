import 'dart:io';import 'package:app_tracking_transparency/app_tracking_transparency.dart';import 'package:firebase_core/firebase_core.dart';import 'package:flutter/material.dart';import 'package:flutter_screenutil/flutter_screenutil.dart';import 'package:get/get_core/src/get_main.dart';import 'package:get/get_instance/get_instance.dart';import 'package:get/get_navigation/get_navigation.dart';import 'package:get/get_state_manager/src/rx_flutter/rx_obx_widget.dart';import 'package:google_mobile_ads/google_mobile_ads.dart';import 'package:prankers/adModule/AdManager.dart';import 'package:prankers/adModule/AppOpenAdManager.dart';import 'package:prankers/adModule/ConsentManager.dart';import 'package:prankers/adModule/InterAd.dart';import 'package:prankers/adModule/NativeAdPool.dart';import 'package:prankers/api/ApiService.dart';import 'package:prankers/extensions/app_colors.dart';import 'package:prankers/extensions/app_text_styles.dart';import 'package:prankers/extensions/screen_size.dart';import 'package:prankers/firebase_options.dart';import 'package:prankers/languages/I10n/app_localizations.dart';import 'package:prankers/messaging/NotificationService.dart';import 'package:prankers/provider/MainController.dart';import 'package:prankers/screens/ScreenCategory.dart';import 'package:prankers/screens/ScreenLanguage.dart';import 'package:prankers/screens/ScreenOnboarding.dart';import 'package:prankers/screens/premium/PremiumManager.dart';import 'package:shared_preferences/shared_preferences.dart';class ScreenSplash extends StatefulWidget {  const ScreenSplash({super.key});  @override  State<ScreenSplash> createState() => _ScreenSplashState();}class _ScreenSplashState extends State<ScreenSplash> with SingleTickerProviderStateMixin {  final controller = Get.find<MainController>();  bool _coreInitDone = false;  var _isMobileAdsInitializeCalled = false;  final _consentManager = ConsentManager();  AnimationController? _controller;  @override  void initState() {    super.initState();    WidgetsBinding.instance.addPostFrameCallback((_) async {      await _handleNetworkAccessDialog();    });    _controller = AnimationController(vsync: this, duration: const Duration(seconds: 7))..forward();  }  Future<void> _handleNetworkAccessDialog() async {    if (Platform.isIOS) {      final status = await AppTrackingTransparency.trackingAuthorizationStatus;      if (status == TrackingStatus.notDetermined) {        await Future.delayed(const Duration(milliseconds: 200));        final newStatus = await AppTrackingTransparency.requestTrackingAuthorization();        print("Tracking status: $newStatus");        if (newStatus == TrackingStatus.authorized) {          _consentManager.gatherConsent((error) {            if (error != null) {              debugPrint("${error.errorCode}: ${error.message}");            }            _initializeMobileAdsSDK();          });        } else {          _initializeMobileAdsSDK();        }      } else {        _initializeMobileAdsSDK();      }    } else {      _initializeMobileAdsSDK();    }  }  Future<void> _initCore() async {    if (_coreInitDone) return;    await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);    await PremiumManager.instance.checkIfPremiumUser();    NotificationService.instance.initialize();    _coreInitDone = true;  }  void _initializeMobileAdsSDK() async {    await _initCore();    if (_isMobileAdsInitializeCalled) return;    if (await _consentManager.canRequestAds()) {      _isMobileAdsInitializeCalled = true;      await MobileAds.instance.initialize();    }    await goto();  }  Future<bool> isAdConfigSuccess() async {    final ApiService apiService = ApiService();    var isSuccess = await apiService.fetchAdConfig("ios_05_prankapp");    return isSuccess;  }  Future<void> goto() async {    if (await isAdConfigSuccess()) {      setState(() {});      final SharedPreferences prefs = await SharedPreferences.getInstance();      var isPremium = controller.isPremium.value;      AdManager.instance?.config ??= await AdManager.instance?.getAdConfig();      if (isPremium == false && AdManager.instance?.config?.isAdStatus == true) {        await InterAd().preloadAd();        await AppOpenAdManager().preloadAd();        await InterAd().preloadRewardedInterstitialAd();        if (prefs.getBool("is_language_enabled") ?? true) {          NativeAdPool(            tag: 'LanguageNativeAd',            list: () => AdManager.instance?.nativeLanguageList ?? [],            factoryId: 'inverseMediumNative',          ).init(context);        } else if (prefs.getBool("is_intro_enabled") ?? true) {          NativeAdPool(            tag: 'OnboardingNativeAd',            list: () => AdManager.instance?.nativeLanguageList ?? [],            factoryId: 'inverseMediumNative',          ).init(context);          NativeAdPool(            tag: 'OnboardingSmallNativeAd',            list: () => AdManager.instance?.nativeLanguageList ?? [],            factoryId: 'inverseSmallNative',          ).init(context);        }      }      Future.delayed(const Duration(seconds: 5), () async {        InterAd().showInitialFlowAd(context, () {          if (isPremium == true) {            Get.off(const ScreenCategory());          } else if (prefs.getBool("is_language_enabled") ?? true) {            Get.off(ScreenLanguage(isSettings: false));          } else if (prefs.getBool("is_intro_enabled") ?? true) {            Get.off(const ScreenOnBoarding());          } else {            Get.off(const ScreenCategory());          }        });      });    }  }  @override  Widget build(BuildContext context) {    return Scaffold(      backgroundColor: colorBackground,      body: Stack(        children: [          Image.asset('assets/ic_splash_background.webp', fit: BoxFit.cover, width: context.screenWidth),          Center(            child: Padding(              padding: EdgeInsets.symmetric(horizontal: 24.sp),              child: Image.asset('assets/ic_splash_icon.webp', fit: BoxFit.contain),            ),          ),          Positioned(            bottom: 12.sp,            left: 12.sp,            right: 12.sp,            child: SafeArea(              child: Column(                mainAxisSize: MainAxisSize.min,                children: [                  if (controller.isPremium.value == false && AdManager.instance?.config?.isAdStatus == true)                    Text(AppLocalizations.of(context)?.ad_warning ?? '', style: AppTextStyles.of(context).bodySmall.copyWith(color: colorAccentText)),                  SizedBox(height: 12.sp),                  Center(                    child: SizedBox(                      width: 180.sp,                      height: 3.sp,                      child: AnimatedBuilder(                        animation: _controller!,                        builder: (context, child) {                          return LinearProgressIndicator(                            value: _controller?.value,                            color: colorPrimary,                            backgroundColor: colorPrimary.withAlpha(10),                            minHeight: 3.sp,                          );                        },                      ),                    ),                  ),                ],              ),            ),          ),        ],      ),    );  }  @override  void dispose() {    _controller?.dispose();    super.dispose();  }}