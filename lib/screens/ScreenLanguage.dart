import 'package:flutter/material.dart';import 'package:flutter_screenutil/flutter_screenutil.dart';import 'package:get/get_core/src/get_main.dart';import 'package:get/get_instance/get_instance.dart';import 'package:get/get_navigation/get_navigation.dart';import 'package:get/get_state_manager/src/rx_flutter/rx_obx_widget.dart';import 'package:google_mobile_ads/google_mobile_ads.dart';import 'package:prankers/adModule/AdManager.dart';import 'package:prankers/adModule/InterAd.dart';import 'package:prankers/adModule/LanguageNativeAd.dart';import 'package:prankers/adModule/NativeShimmer.dart';import 'package:prankers/adModule/OnboardingNativeAd.dart';import 'package:prankers/extensions/app_colors.dart';import 'package:prankers/extensions/app_text_styles.dart';import 'package:prankers/extensions/languages.dart';import 'package:prankers/extensions/screen_size.dart';import 'package:prankers/languages/I10n/app_localizations.dart';import 'package:prankers/provider/LifecycleHandler.dart';import 'package:prankers/provider/MainController.dart';import 'package:prankers/screens/ScreenCategory.dart';import 'package:prankers/screens/ScreenOnboarding.dart';import 'package:prankers/screens/settings/ScreenSettings.dart';import 'package:prankers/widgets/app_bar.dart';import 'package:shared_preferences/shared_preferences.dart';class ScreenLanguage extends StatefulWidget {  bool? isSettings;  ScreenLanguage({super.key, required this.isSettings});  @override  State<ScreenLanguage> createState() => _ScreenLanguageState();}class _ScreenLanguageState extends State<ScreenLanguage> {  final controller = Get.find<MainController>();  final LifecycleHandler _lifecycleHandler = LifecycleHandler();  String? _selectedLanguageCode = "";  AdWidget? _adWidget1;  AdWidget? _adWidget2;  bool _showButton = false;  @override  void initState() {    super.initState();    _loadAd();    preload();    if (widget.isSettings == true) {      _showButton = true;      _selectedLanguageCode = controller.selectedLanguage.value;    }    WidgetsBinding.instance.addPostFrameCallback((_) {      _lifecycleHandler.init(context);    });  }  @override  void dispose() {    _lifecycleHandler.dispose();    super.dispose();  }  Future<void> _loadAd() async {    if (controller.isPremium.value == false && AdManager.instance?.config?.isAdStatus == true) {      LanguageNativeAd.instance.loadAdWithCallback((loadedAd) {        if (mounted && loadedAd != null) {          setState(() {            _adWidget1 = AdWidget(ad: loadedAd);          });        }      });      if (widget.isSettings == false) {        LanguageNativeAd.instance.loadAdWithCallback((loadedAd) {          if (mounted && loadedAd != null) {            setState(() {              _adWidget2 = AdWidget(ad: loadedAd);            });          }        });      }    }  }  Future<void> preload() async {    if (widget.isSettings == false) {      if (controller.isPremium.value == false) {        final SharedPreferences prefs = await SharedPreferences.getInstance();        if (prefs.getBool("is_intro_enabled") ?? true) {          await OnboardingNativeAd.instance.init(context);        }      }    }  }  @override  Widget build(BuildContext context) {    return Obx(() {      return Scaffold(        backgroundColor: AppColors.background(context),        appBar: buildAppBar(          context,          text: AppLocalizations.of(context)?.title_app_language ?? '',          isBack: widget.isSettings == true,          onPressed: () {            if (widget.isSettings == true) {              Get.off(ScreenSettings());            }          },          actions: [            _showButton                ? Padding(                  padding: EdgeInsets.only(right: 16.sp),                  child: IconButton(                    onPressed: () async {                      controller.changeLanguage(_selectedLanguageCode ?? "");                      final SharedPreferences prefs = await SharedPreferences.getInstance();                      // prefs.setBool("is_language_enabled", false);                      InterAd().showInitialFlowAd(context, () {                        if (widget.isSettings == true) {                          Get.off(ScreenSettings());                        } else if (prefs.getBool("is_intro_enabled") ?? true) {                          Get.off(ScreenOnBoarding());                        } else {                          Get.off(ScreenCategory());                        }                      });                    },                    icon: Icon(Icons.check_rounded, color: AppColors.text(context)),                  ),                )                : Container(),          ],        ),        body: SafeArea(          child: Column(            children: [              _buildLanguageList(context),              if (controller.isPremium.value == false && AdManager.instance?.config?.isAdStatus == true) ...[                if (widget.isSettings == true || _selectedLanguageCode?.isEmpty == true) ...[                  SizedBox(height: 134, child: _adWidget1 ?? buildLanguageAd(context)),                ] else ...[                  SizedBox(height: 134, child: _adWidget2 ?? buildLanguageAd(context)),                ],              ],            ],          ),        ),      );    });  }  Widget _buildLanguageList(BuildContext context) {    return Expanded(      child: Padding(        padding: EdgeInsets.symmetric(horizontal: 16.sp, vertical: 16.sp),        child:            context.isTabletSize                ? GridView.builder(                  itemCount: languages.length,                  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(                    crossAxisCount: 2, // 2 columns for tablets                    crossAxisSpacing: 12.sp,                    mainAxisSpacing: 12.sp,                    childAspectRatio: 4.5,                  ),                  itemBuilder: (context, index) {                    return _buildLanguageItem(context, languages[index]);                  },                )                : ListView.builder(                  itemCount: languages.length,                  itemBuilder: (context, index) {                    return Padding(padding: EdgeInsets.only(bottom: 8.sp), child: _buildLanguageItem(context, languages[index]));                  },                ),      ),    );  }  Widget _buildLanguageItem(BuildContext context, dynamic language) {    return GestureDetector(      onTap: () {        if (!_showButton) {          Future.delayed(Duration(seconds: 1), () {            if (mounted) {              setState(() {                _showButton = true;              });            }          });        }        setState(() {          _selectedLanguageCode = language.code ?? 'en';        });      },      child: Container(        padding: EdgeInsets.symmetric(vertical: 12.sp, horizontal: 16.sp),        decoration: BoxDecoration(color: AppColors.card(context), borderRadius: BorderRadius.circular(16)),        child: Row(          mainAxisAlignment: MainAxisAlignment.spaceBetween,          children: [            Image.asset(language.icon, width: context.isTabletSize ? 64.sp : 32.sp, height: context.isTabletSize ? 64.sp : 32.sp),            SizedBox(width: 16.sp),            Expanded(child: Text(language?.title ?? '', style: AppTextStyles.bodyText1(context).copyWith(fontSize: context.isTabletSize?24.sp:16.sp), overflow: TextOverflow.ellipsis)),            _selectedLanguageCode == language.code ? Transform.scale(scale: 1.2, child: Icon(Icons.check_circle_rounded, color: AppColors.accent(context))) : Container(),          ],        ),      ),    );  }}