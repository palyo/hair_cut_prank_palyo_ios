import 'dart:async';import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:flutter_screenutil/flutter_screenutil.dart';import 'package:get/get.dart';import 'package:in_app_purchase/in_app_purchase.dart';import 'package:prankers/adModule/InterAd.dart';import 'package:prankers/extensions/app_colors.dart';import 'package:prankers/extensions/app_text_styles.dart';import 'package:prankers/extensions/screen_size.dart';import 'package:prankers/languages/I10n/app_localizations.dart';import 'package:prankers/provider/MainController.dart';import 'package:prankers/screens/ScreenCategory.dart';import 'package:url_launcher/url_launcher.dart';class ScreenPremium extends StatefulWidget {  const ScreenPremium({super.key});  @override  State<ScreenPremium> createState() => _ScreenPremiumState();}class _ScreenPremiumState extends State<ScreenPremium> {  final InAppPurchase _inAppPurchase = InAppPurchase.instance;  final Set<String> _productIds = {'HairPrankWeekly', 'HairPrankYearly'};  StreamSubscription<List<PurchaseDetails>>? _subscription;  final controller = Get.find<MainController>();  List<ProductDetails> _products = [];  bool _isLoading = true;  bool _isPurchasing = false;  bool _showButton = false;  int _selectedPlan = 2;  @override  void initState() {    super.initState();    _subscription = _inAppPurchase.purchaseStream.listen(_handlePurchaseUpdates, onDone: _subscription?.cancel, onError: (error) => debugPrint("Purchase stream error: $error"));    Future.delayed(Duration(seconds: 3), () => setState(() => _showButton = true));    _initializeStore();  }  Future<void> _initializeStore() async {    if (!await _inAppPurchase.isAvailable()) {      debugPrint("Store is not available");      setState(() => _isLoading = false);      return;    }    final response = await _inAppPurchase.queryProductDetails(_productIds);    if (response.error != null) {      debugPrint("Error fetching products: ${response.error!.message}");    } else {      _products = response.productDetails.toList()..sort((a, b) => a.rawPrice.compareTo(b.rawPrice));    }    setState(() => _isLoading = false);  }  void _handlePurchaseUpdates(List<PurchaseDetails> purchases) async {    for (final purchase in purchases) {      debugPrint("Purchase: ====> ${purchase.status}");      if ((purchase.status == PurchaseStatus.purchased || purchase.status == PurchaseStatus.restored) && _verifyPurchase(purchase)) {        await controller.setPremium(true);        if (purchase.pendingCompletePurchase) {          await _inAppPurchase.completePurchase(purchase);        }        Get.off(() => const ScreenCategory());      } else if (purchase.status == PurchaseStatus.error) {        final errorCode = purchase.error?.code ?? '';        final errorMsg = purchase.error?.message ?? '';        debugPrint("Purchase failed: [$errorCode] $errorMsg");        if (errorCode == 'storekit2_purchase_cancelled' || errorMsg.toLowerCase().contains('cancelled')) {          debugPrint("User cancelled the purchase dialog.");        }        setState(() => _isPurchasing = false);      }    }  }  bool _verifyPurchase(PurchaseDetails purchase) => _productIds.contains(purchase.productID) && purchase.status == PurchaseStatus.purchased;  void _buy(ProductDetails product) async {    setState(() => _isPurchasing = true);    try {      await _inAppPurchase.buyNonConsumable(purchaseParam: PurchaseParam(productDetails: product));    } on PlatformException catch (e) {      debugPrint("Purchase PlatformException: ${e.code} - ${e.message}");      if (e.code == 'storekit2_purchase_cancelled') {        debugPrint("User canceled the Apple login or purchase dialog.");      }      setState(() => _isPurchasing = false);    } catch (e) {      debugPrint("Unexpected purchase error: $e");      setState(() => _isPurchasing = false);    }  }  void _restore() async {    setState(() => _isPurchasing = true);    if (mounted) {      ScaffoldMessenger.of(context).showSnackBar(        SnackBar(          content: Text("Checking for past purchases...", style: AppTextStyles.bodyText1(context).copyWith(color: AppColors.cardText(context))),          duration: Duration(seconds: 2),          behavior: SnackBarBehavior.floating,          backgroundColor: AppColors.card(context),        ),      );    }    try {      await _inAppPurchase.restorePurchases();    } on PlatformException catch (e) {      debugPrint("PlatformException: ${e.code} - ${e.message}");      if (e.code == 'storekit2_purchase_cancelled') {        debugPrint("User canceled the Apple login or purchase dialog.");      }      if (mounted) {        ScaffoldMessenger.of(context).showSnackBar(          SnackBar(            content: Text("Restore cancelled: ${e.message ?? ''}", style: AppTextStyles.bodyText1(context).copyWith(color: AppColors.cardText(context))),            duration: Duration(seconds: 2),            behavior: SnackBarBehavior.floating,            backgroundColor: AppColors.card(context),          ),        );      }      setState(() => _isPurchasing = false);    } catch (e) {      debugPrint("Unexpected restore error: $e");      if (mounted) {        ScaffoldMessenger.of(context).showSnackBar(          SnackBar(            content: Text("Something went wrong during restore.", style: AppTextStyles.bodyText1(context).copyWith(color: AppColors.cardText(context))),            duration: Duration(seconds: 2),            behavior: SnackBarBehavior.floating,            backgroundColor: AppColors.card(context),          ),        );      }      setState(() => _isPurchasing = false);    }    Future.delayed(const Duration(seconds: 10), () {      if (mounted) {        ScaffoldMessenger.of(context).showSnackBar(          SnackBar(            content: Text("Something went wrong during restore.", style: AppTextStyles.bodyText1(context).copyWith(color: AppColors.cardText(context))),            duration: Duration(seconds: 2),            behavior: SnackBarBehavior.floating,            backgroundColor: AppColors.card(context),          ),        );      }      setState(() => _isPurchasing = false);    });  }  Future<void> _launchUrl(String uri) async {    final url = Uri.parse(uri);    if (await canLaunchUrl(url)) {      await launchUrl(url, mode: LaunchMode.externalApplication);    } else {      throw 'Could not launch $uri';    }  }  Widget _buildBullet(String? text) => Padding(    padding: EdgeInsets.symmetric(horizontal: 28.sp),    child: Text('\u2022 $text', style: AppTextStyles.bodyText2(context), textAlign: TextAlign.start),  );  Widget _buildPlanCard({required int index, required String title, required String subtitle}) {    final bool isSelected = _selectedPlan == index;    return SizedBox(      width: double.infinity,      child: Padding(        padding: EdgeInsets.symmetric(horizontal: 28.sp),        child: Stack(          children: [            GestureDetector(              onTap: () => setState(() => _selectedPlan = index),              child: Container(                width: double.infinity,                decoration: BoxDecoration(                  color: isSelected ? AppColors.background(context) : AppColors.card(context),                  borderRadius: BorderRadius.circular(12.sp),                  border: Border.all(color: isSelected ? Colors.black : AppColors.card(context), width: 2.sp),                ),                padding: EdgeInsets.all(12.sp),                child: Column(                  crossAxisAlignment: CrossAxisAlignment.start,                  children: [                    Text(title, style: AppTextStyles.subheading3(context)),                    SizedBox(height: 4.sp),                    Text(subtitle, style: AppTextStyles.bodyText3(context)),                  ],                ),              ),            ),            if (isSelected)              Positioned(                right: 8.sp,                top: 8.sp,                child: Container(                  padding: EdgeInsets.all(2.sp),                  decoration: BoxDecoration(color: Colors.black, borderRadius: BorderRadius.circular(4.sp)),                  child: Icon(Icons.check_rounded, size: 16.sp, color: AppColors.accentText(context)),                ),              ),          ],        ),      ),    );  }  Widget _buildBottomButtons() => Padding(    padding: EdgeInsets.symmetric(horizontal: 20.sp),    child: Row(      mainAxisAlignment: MainAxisAlignment.spaceBetween,      children: [        Expanded(child: _textButton(AppLocalizations.of(context)?.action_terms_of_use ?? 'Terms of use', 'https://pkprivacy.blogspot.com/2025/06/termofuse2025.html')),        Expanded(          child: TextButton(            onPressed: _isPurchasing ? null : _restore,            style: _textButtonStyle(),            child: Text(AppLocalizations.of(context)?.action_restore ?? 'Restore', style: AppTextStyles.bodyText2(context), textAlign: TextAlign.center),          ),        ),        Expanded(child: _textButton(AppLocalizations.of(context)?.action_privacy_policy ?? 'Privacy Policy', 'https://pkprivacy.blogspot.com/2025/06/privacypolicy2025.html')),      ],    ),  );  TextButton _textButton(String text, String url) => TextButton(    onPressed: () => _launchUrl(url),    style: _textButtonStyle(),    child: Text(text, style: AppTextStyles.bodyText2(context), textAlign: TextAlign.center),  );  ButtonStyle _textButtonStyle() => TextButton.styleFrom(    foregroundColor: AppColors.accent(context),    backgroundColor: AppColors.background(context),    padding: EdgeInsets.symmetric(horizontal: 12.sp, vertical: 12.sp),  );  @override  void dispose() {    _subscription?.cancel();    super.dispose();  }  @override  Widget build(BuildContext context) {    return Obx(      () => AnnotatedRegion<SystemUiOverlayStyle>(        value: SystemUiOverlayStyle(statusBarColor: Colors.transparent, statusBarIconBrightness: Brightness.light, statusBarBrightness: Brightness.light),        child: Scaffold(          backgroundColor: AppColors.background(context),          body: Column(            crossAxisAlignment: CrossAxisAlignment.start,            children: [              SizedBox(height: MediaQuery.of(context).padding.top),              Padding(                padding: EdgeInsets.symmetric(horizontal: 28.sp, vertical: 8.sp),                child: Row(                  crossAxisAlignment: CrossAxisAlignment.start,                  children: [                    Expanded(                      child: Text(                        AppLocalizations.of(context)?.title_premium_screen ?? '',                        textAlign: TextAlign.start,                        style: AppTextStyles.headline1(context).copyWith(fontSize: context.isTabletSize ? 52.sp : 28.sp, fontWeight: FontWeight.w900),                      ),                    ),                    if (_showButton) ...[                      Container(                        decoration: BoxDecoration(color: AppColors.text(context).withAlpha(150), borderRadius: BorderRadius.circular(16.sp)),                        child: GestureDetector(                          child: Padding(                            padding: EdgeInsets.all(4.sp),                            child: Icon(Icons.close, color: AppColors.primary(context), size: 16.sp),                          ),                          onTap: () => InterAd().showInitialFlowAd(context, () {                            Get.off(() => const ScreenCategory());                          }),                        ),                      ),                    ],                  ],                ),              ),              Center(                child: Image.asset('assets/ic_premium_app_icon.webp', width: 120.sp, height: 120.sp),              ),              SizedBox(height: 12.sp),              Center(child: Image.asset('assets/ic_premium_app_name.webp', width: 200.sp)),              SizedBox(height: 24.sp),              Padding(                padding: EdgeInsets.symmetric(horizontal: 28.sp),                child: Text(AppLocalizations.of(context)?.header_why_premium ?? '', style: AppTextStyles.subheading3(context)),              ),              SizedBox(height: 12.sp),              _buildBullet(AppLocalizations.of(context)?.body_premium_feature_1),              _buildBullet(AppLocalizations.of(context)?.body_premium_feature_2),              _buildBullet(AppLocalizations.of(context)?.body_premium_feature_3),              _buildBullet(AppLocalizations.of(context)?.body_premium_feature_4),              SizedBox(height: 18.sp),              Padding(                padding: EdgeInsets.symmetric(horizontal: 28.sp),                child: Text(AppLocalizations.of(context)?.label_choose_plan ?? '', style: AppTextStyles.subheading3(context)),              ),              SizedBox(height: 12.sp),              _buildPlanCard(                index: 1,                title: AppLocalizations.of(context)?.plan_weekly ?? '',                subtitle: '${_products.isNotEmpty ? _products[0].price : '--.--'} / ${AppLocalizations.of(context)?.plan_week ?? ''}',              ),              SizedBox(height: 8.sp),              _buildPlanCard(                index: 2,                title: AppLocalizations.of(context)?.plan_annual ?? '',                subtitle: '${_products.length > 1 ? _products[1].price : '--.--'} / ${AppLocalizations.of(context)?.plan_year ?? ''}',              ),              Spacer(),              Padding(                padding: EdgeInsets.symmetric(horizontal: 28.sp),                child: SizedBox(                  width: double.infinity,                  child: ElevatedButton(                    onPressed: _isPurchasing || _products.length < _selectedPlan ? null : () => _buy(_products[_selectedPlan - 1]),                    style: ElevatedButton.styleFrom(                      backgroundColor: Colors.black,                      padding: EdgeInsets.symmetric(vertical: 20.sp),                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(24.sp)),                    ).copyWith(overlayColor: WidgetStateProperty.all(AppColors.accent(context).withAlpha(25))),                    child: _isPurchasing                        ? SizedBox(                            width: 24.sp,                            height: 24.sp,                            child: CircularProgressIndicator(strokeWidth: 2.sp, valueColor: AlwaysStoppedAnimation<Color>(Colors.black)),                          )                        : Text(AppLocalizations.of(context)?.action_upgrade_pro ?? '', style: AppTextStyles.accentButtonText(context)),                  ),                ),              ),              _buildBottomButtons(),              SizedBox(height: MediaQuery.of(context).padding.bottom),            ],          ),        ),      ),    );  }}