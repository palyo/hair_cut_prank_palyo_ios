import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:flutter_screenutil/flutter_screenutil.dart';import 'package:get/get.dart';import 'package:google_mobile_ads/google_mobile_ads.dart';import 'package:prankers/adModule/AdManager.dart';import 'package:prankers/adModule/InterAd.dart';import 'package:prankers/adModule/NativeAdPool.dart';import 'package:prankers/adModule/NativeShimmer.dart';import 'package:prankers/extensions/app_colors.dart';import 'package:prankers/extensions/app_text_styles.dart';import 'package:prankers/extensions/screen_size.dart';import 'package:prankers/languages/I10n/app_localizations.dart';import 'package:prankers/provider/LifecycleHandler.dart';import 'package:prankers/provider/MainController.dart';import 'package:prankers/screens/welcome/ScreenWelcome.dart';import 'package:smooth_page_indicator/smooth_page_indicator.dart';class ScreenOnBoarding extends StatefulWidget {  const ScreenOnBoarding({super.key});  @override  State<ScreenOnBoarding> createState() => _ScreenOnBoardingState();}class _ScreenOnBoardingState extends State<ScreenOnBoarding> {  final LifecycleHandler _lifecycleHandler = LifecycleHandler();  final controller = Get.find<MainController>();  final PageController _controller = PageController();  int _currentPage = 0;  AdWidget? _adWidgets = null;  AdWidget? _adSmallWidgets = null;  @override  void initState() {    super.initState();    _loadAd();    WidgetsBinding.instance.addPostFrameCallback((_) {      _lifecycleHandler.init(context);    });  }  @override  void dispose() {    _lifecycleHandler.dispose();    super.dispose();  }  void _loadAd() async {    if (controller.isPremium.value == false && AdManager.instance?.config?.isAdStatus == true) {      NativeAdPool(        tag: 'OnboardingNativeAd',        list: () => AdManager.instance?.nativeLanguageList ?? [],        factoryId: 'inverseMediumNative',      ).loadAdWithCallback((ad) {        if (mounted && ad != null)          setState(() => _adWidgets = AdWidget(ad: ad));      });      NativeAdPool(        tag: 'OnboardingSmallNativeAd',        list: () => AdManager.instance?.nativeLanguageList ?? [],        factoryId: 'inverseSmallNative',      ).loadAdWithCallback((ad) {        if (mounted && ad != null)          setState(() => _adSmallWidgets = AdWidget(ad: ad));      });    }  }  Widget _buildImageWithText(BuildContext context, String asset, String text) {    return Column(      children: [        Expanded(child: Image.asset(asset, fit: BoxFit.fitHeight, width: context.screenWidth)),        Padding(          padding: EdgeInsets.all(12.sp),          child: Text(              text,              style: AppTextStyles.of(context).headline5.copyWith(color: colorAccentText),              textAlign: TextAlign.center,            ),        ),      ],    );  }  Widget _buildPage(BuildContext context, int index) {    final assetMap = ['assets/ic_onboarding_1.webp', 'assets/ic_onboarding_2.webp', 'assets/ic_onboarding_4.webp'];    final textMap = [      AppLocalizations.of(context)?.body_onboarding_1 ?? '',      AppLocalizations.of(context)?.body_onboarding_2 ?? '',      AppLocalizations.of(context)?.body_onboarding_4 ?? '',    ];    return _buildImageWithText(context, assetMap[index], textMap[index]);  }  void _handleNextTap() {    if (_currentPage < 2) {      _controller.nextPage(duration: const Duration(milliseconds: 300), curve: Curves.easeInOut);    } else {      InterAd().showInitialFlowAd(context, () {        Get.off(() => const ScreenWelcome());      });    }  }  @override  Widget build(BuildContext context) {    return Obx(() {      final isAdUser = controller.isPremium.value == false && AdManager.instance?.config?.isAdStatus == true;      final pageCount = 3;      return AnnotatedRegion<SystemUiOverlayStyle>(        value: const SystemUiOverlayStyle(          statusBarColor: Colors.transparent,          statusBarIconBrightness: Brightness.dark,          statusBarBrightness: Brightness.dark,        ),        child: Scaffold(          backgroundColor: categoryCard,          body: Column(            children: [              Expanded(                child: PageView.builder(                  controller: _controller,                  physics: const ClampingScrollPhysics(),                  itemCount: pageCount,                  onPageChanged: (index) => setState(() => _currentPage = index),                  itemBuilder: (context, index) => _buildPage(context, index),                ),              ),              TextButton(                onPressed: _handleNextTap,                style: TextButton.styleFrom(                  foregroundColor: colorAccentText.withAlpha(25),                  backgroundColor: Colors.transparent,                  padding: EdgeInsets.symmetric(horizontal: 12.sp, vertical: 12.sp),                ),                child: Text(                  AppLocalizations.of(context)?.action_next ?? 'Next',                  style: AppTextStyles.of(context).bodyMedium.copyWith(color: colorAccentText, fontWeight: FontWeight.w600),                ),              ),              SizedBox(height: 12.sp),              Padding(                padding: EdgeInsets.only(top: 6.sp, bottom: 12.sp),                child: SmoothPageIndicator(                  controller: _controller,                  count: pageCount,                  effect: WormEffect(                    dotHeight: 10.sp,                    dotWidth: 10.sp,                    dotColor: colorAccentText.withAlpha(35),                    activeDotColor: colorAccentText,                  ),                ),              ),              SizedBox(height: 12.sp),              AnimatedSwitcher(                duration: const Duration(milliseconds: 100),                switchInCurve: Curves.easeOut,                switchOutCurve: Curves.easeIn,                child: !isAdUser                    ? const SizedBox.shrink(key: ValueKey('no‑ad'))                    : _currentPage == 1                    ? SizedBox(                  key: const ValueKey('small‑ad'),                  height: 134,                  child: _adSmallWidgets ?? buildSmallOnboardingAd(context),                )                    : SizedBox(                  key: const ValueKey('big‑ad'),                  height: 265,                  child: _adWidgets ?? buildOnboardingAd(context),                ),              ),              Container(                height: MediaQuery.of(context).padding.bottom,                color: isAdUser ? colorCard : categoryCard,              ),            ],          ),        ),      );    });  }}