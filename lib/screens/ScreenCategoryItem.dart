import 'package:flutter/material.dart';import 'package:flutter_screenutil/flutter_screenutil.dart';import 'package:get/get_core/src/get_main.dart';import 'package:get/get_instance/get_instance.dart';import 'package:get/get_navigation/get_navigation.dart';import 'package:get/get_state_manager/src/rx_flutter/rx_obx_widget.dart';import 'package:google_mobile_ads/google_mobile_ads.dart';import 'package:prankers/adModule/AdManager.dart';import 'package:prankers/adModule/InterAd.dart';import 'package:prankers/extensions/app_colors.dart';import 'package:prankers/extensions/app_text_styles.dart';import 'package:prankers/extensions/screen_size.dart';import 'package:prankers/languages/I10n/app_localizations.dart';import 'package:prankers/provider/LifecycleHandler.dart';import 'package:prankers/screens/ScreenPlayer.dart';import 'package:prankers/screens/premium/ScreenPremium.dart';import '../provider/MainController.dart';class ScreenCategoryItem extends StatefulWidget {  final String? category;  final bool? isPlayer;  const ScreenCategoryItem({super.key, this.category, this.isPlayer});  @override  State<ScreenCategoryItem> createState() => _ScreenCategoryItemState();}class _ScreenCategoryItemState extends State<ScreenCategoryItem> {  final controller = Get.find<MainController>();  final LifecycleHandler _lifecycleHandler = LifecycleHandler();  List<String> items = [];  int bannerHeight = 65;  AdWidget? _adWidget;  bool _isBannerAdReady = false;  @override  void initState() {    super.initState();    items = childItems(context, widget.category ?? '');    WidgetsBinding.instance.addPostFrameCallback((_) {      _lifecycleHandler.init(context);    });  }  Future<void> _loadAd() async {    if (controller.isPremium.value == false &&        AdManager.instance?.config?.isAdStatus == true &&        AdManager.instance?.config?.isNativeAdStatus == true) {      final adUnitId = AdManager.instance?.config?.banner ?? 'ca-app-pub-3940256099942544/8388050270';      final AnchoredAdaptiveBannerAdSize? size = await AdSize.getCurrentOrientationAnchoredAdaptiveBannerAdSize(        MediaQuery.of(context).size.width.truncate(),      );      if (size == null) {        debugPrint('Unable to get adaptive banner size.');        return;      }      final BannerAd banner = BannerAd(        size: size,        adUnitId: adUnitId,        listener: BannerAdListener(          onAdLoaded: (Ad ad) {            debugPrint('Ad loaded.');            setState(() {              var banner = ad as BannerAd;              bannerHeight = banner.size.height;              _adWidget = AdWidget(ad: banner);              _isBannerAdReady = true;            });          },          onAdFailedToLoad: (Ad ad, LoadAdError error) {            debugPrint('Ad failed to load: $error');            ad.dispose();          },        ),        request: const AdRequest(extras: {"collapsible": "bottom"}),      );      banner.load();    }  }  @override  void didChangeDependencies() {    super.didChangeDependencies();    _loadAd();  }  @override  Widget build(BuildContext context) {    return Obx(() {      return Scaffold(        backgroundColor: colorBackground,        body: Stack(          children: [            Padding(              padding: EdgeInsets.only(                bottom:                    MediaQuery.of(context).padding.bottom +                    (controller.isPremium.value == false &&                            AdManager.instance?.config?.isAdStatus == true &&                            AdManager.instance?.config?.isNativeAdStatus == true                        ? (_isBannerAdReady ? bannerHeight.toDouble() : 65)                        : 0),              ),              child: Column(                mainAxisSize: MainAxisSize.max,                children: [                  Stack(                    children: [                      Image.asset('assets/ic_toolbar_bg.webp', fit: BoxFit.fitWidth),                      Positioned(                        left: context.isTabletSize ? 250.sp : 100.sp,                        top: MediaQuery.of(context).padding.top + 12.sp,                        bottom: 12.sp,                        right: context.isTabletSize ? 250.sp : 100.sp,                        child: Center(child: Text(getCategoryTitle(context, widget.category ?? ''), style: AppTextStyles.of(context).accentToolbar)),                      ),                      Positioned(                        left: context.isTabletSize ? 36.sp : 12.sp,                        top: MediaQuery.of(context).padding.top + 12.sp,                        bottom: 12.sp,                        child: GestureDetector(                          onTap: () {                            Get.back();                          },                          child: Image.asset(                            'assets/icons/ic_navigation_back.webp',                            width: context.isTabletSize ? 100.sp : 56.sp,                            height: context.isTabletSize ? 100.sp : 56.sp,                            fit: BoxFit.contain,                          ),                        ),                      ),                      Positioned(                        right: context.isTabletSize ? 36.sp : 12.sp,                        top: MediaQuery.of(context).padding.top + 12.sp,                        bottom: 12.sp,                        child: GestureDetector(                          onTap: () {                            Get.off(ScreenPremium());                          },                          child: Image.asset(                            'assets/icons/ic_action_premium.webp',                            width: context.isTabletSize ? 100.sp : 56.sp,                            height: context.isTabletSize ? 100.sp : 56.sp,                            fit: BoxFit.contain,                          ),                        ),                      ),                    ],                  ),                  Expanded(                    child: Scrollbar(                      thumbVisibility: false,                      child: Padding(                        padding: EdgeInsets.all(12.0),                        child: GridView.builder(                          padding: EdgeInsets.zero,                          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(                            crossAxisCount: context.isTabletSize ? 3 : 2,                            crossAxisSpacing: 12,                            mainAxisSpacing: 12,                            childAspectRatio: 0.9,                          ),                          itemCount: items.length,                          itemBuilder: (context, index) {                            final item = items[index];                            return buildCategory(item, widget.category ?? '', (category) {                              InterAd().showAd(context, () {                                if (widget.isPlayer == true) {                                  Get.off(ScreenPlayer(category: category, item: item));                                } else {                                  Get.to(ScreenPlayer(category: category, item: item));                                }                              });                            });                          },                        ),                      ),                    ),                  ),                ],              ),            ),            if (controller.isPremium.value == false &&                AdManager.instance?.config?.isAdStatus == true &&                AdManager.instance?.config?.isNativeAdStatus == true)              if (_isBannerAdReady && _adWidget != null)                Positioned(                  bottom: MediaQuery.of(context).padding.bottom,                  left: 0,                  right: 0,                  child: SizedBox(width: context.screenWidth, height: bannerHeight.toDouble(), child: _adWidget),                )              else                Positioned(                  bottom: MediaQuery.of(context).padding.bottom,                  left: 0,                  right: 0,                  child: Container(height: 65, color: colorCard),                ),          ],        ),      );    });  }  Widget buildCategory(String icon, String key, Function(String) onPressed) {    return GestureDetector(      onTap: () {        onPressed(key);      },      child: ClipRRect(        borderRadius: BorderRadius.circular(24.sp),        child: Container(          color: categoryCard,          child: Stack(            children: [              Image.asset('assets/categories/ic_category_bg.webp'),              Positioned(top: 0, left: 0, right: 0, bottom: 0, child: Image.asset('assets/categories/$key/$icon.webp')),            ],          ),        ),      ),    );  }  String getCategoryTitle(BuildContext context, String key) {    final loc = AppLocalizations.of(context);    switch (key) {      case 'hair_clipper':        return loc?.category_hair_clipper ?? '';      case 'hair_cut':        return loc?.category_hair_cut ?? '';      case 'taser':        return loc?.category_taser ?? '';      case 'gun':        return loc?.category_gun ?? '';      case 'fart':        return loc?.category_fart ?? '';      case 'bomb_sound':        return loc?.category_bomb_sound ?? '';      case 'animals':        return loc?.category_animals ?? '';      case 'air_horn':        return loc?.category_air_horn ?? '';      case 'horror_sound':        return loc?.category_horror_sound ?? '';      case 'police_siren':        return loc?.category_police_siren ?? '';      default:        return '';    }  }  List<String> childItems(BuildContext context, String key) {    switch (key) {      case 'hair_clipper':        return [          'ic_hair_clipper_1',          'ic_hair_clipper_2',          'ic_hair_clipper_3',          'ic_hair_clipper_4',          'ic_hair_clipper_5',          'ic_hair_clipper_6',          'ic_hair_clipper_7',          'ic_hair_clipper_8',          'ic_hair_clipper_9',          'ic_hair_clipper_10',        ];      case 'hair_cut':        return [          'ic_hair_cut_1',          'ic_hair_cut_2',          'ic_hair_cut_3',          'ic_hair_cut_4',          'ic_hair_cut_5',          'ic_hair_cut_6',          'ic_hair_cut_7',          'ic_hair_cut_8',          'ic_hair_cut_9',          'ic_hair_cut_10',        ];      case 'taser':        return ['ic_taser_1', 'ic_taser_2', 'ic_taser_3', 'ic_taser_4', 'ic_taser_5', 'ic_taser_6', 'ic_taser_7', 'ic_taser_8'];      case 'gun':        return ['ic_gun_1', 'ic_gun_2', 'ic_gun_3', 'ic_gun_4', 'ic_gun_5', 'ic_gun_6', 'ic_gun_7', 'ic_gun_8'];      case 'fart':        return ['ic_fart_1', 'ic_fart_2', 'ic_fart_3', 'ic_fart_4', 'ic_fart_5', 'ic_fart_6', 'ic_fart_7', 'ic_fart_8', 'ic_fart_9', 'ic_fart_10'];      case 'bomb_sound':        return [          'ic_bomb_sound_1',          'ic_bomb_sound_2',          'ic_bomb_sound_3',          'ic_bomb_sound_4',          'ic_bomb_sound_5',          'ic_bomb_sound_6',          'ic_bomb_sound_7',          'ic_bomb_sound_8',          'ic_bomb_sound_9',          'ic_bomb_sound_10',        ];      case 'animals':        return [          'ic_animals_1',          'ic_animals_2',          'ic_animals_3',          'ic_animals_4',          'ic_animals_5',          'ic_animals_6',          'ic_animals_7',          'ic_animals_8',          'ic_animals_9',          'ic_animals_10',        ];      case 'air_horn':        return [          'ic_air_horn_1',          'ic_air_horn_2',          'ic_air_horn_3',          'ic_air_horn_4',          'ic_air_horn_5',          'ic_air_horn_6',          'ic_air_horn_7',          'ic_air_horn_8',          'ic_air_horn_9',          'ic_air_horn_10',        ];      case 'horror_sound':        return [          'ic_horror_sound_1',          'ic_horror_sound_2',          'ic_horror_sound_3',          'ic_horror_sound_4',          'ic_horror_sound_5',          'ic_horror_sound_6',          'ic_horror_sound_7',          'ic_horror_sound_8',          'ic_horror_sound_9',          'ic_horror_sound_10',        ];      case 'police_siren':        return [          'ic_police_siren_1',          'ic_police_siren_2',          'ic_police_siren_3',          'ic_police_siren_4',          'ic_police_siren_5',          'ic_police_siren_6',          'ic_police_siren_7',          'ic_police_siren_8',        ];      default:        return [];    }  }  @override  void dispose() {    _adWidget = null;    _lifecycleHandler.dispose();    super.dispose();  }}