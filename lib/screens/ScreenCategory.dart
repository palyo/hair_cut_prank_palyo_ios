import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:flutter_screenutil/flutter_screenutil.dart';import 'package:get/get_core/src/get_main.dart';import 'package:get/get_instance/get_instance.dart';import 'package:get/get_navigation/get_navigation.dart';import 'package:get/get_state_manager/src/rx_flutter/rx_obx_widget.dart';import 'package:google_mobile_ads/google_mobile_ads.dart';import 'package:prankers/adModule/AdManager.dart';import 'package:prankers/extensions/app_colors.dart';import 'package:prankers/extensions/app_text_styles.dart';import 'package:prankers/extensions/screen_size.dart';import 'package:prankers/languages/I10n/app_localizations.dart';import 'package:prankers/provider/LifecycleHandler.dart';import 'package:prankers/screens/ScreenCategoryItem.dart';import 'package:prankers/screens/settings/ScreenSettings.dart';import '../provider/MainController.dart';class ScreenCategory extends StatefulWidget {  const ScreenCategory({super.key});  @override  State<ScreenCategory> createState() => _ScreenCategoryState();}class _ScreenCategoryState extends State<ScreenCategory> {  final controller = Get.find<MainController>();  final LifecycleHandler _lifecycleHandler = LifecycleHandler();  int bannerHeight = 65;  AdWidget? _adWidget;  bool _isBannerAdReady = false;  @override  void initState() {    super.initState();    WidgetsBinding.instance.addPostFrameCallback((_) {      _lifecycleHandler.init(context);    });  }  Future<void> _loadAd() async {    if (controller.isPremium.value == false && AdManager.instance?.config?.isAdStatus == true && AdManager.instance?.config?.isNativeAdStatus == true) {      final adUnitId = AdManager.instance?.config?.banner ?? 'ca-app-pub-3940256099942544/8388050270';      final AnchoredAdaptiveBannerAdSize? size = await AdSize.getCurrentOrientationAnchoredAdaptiveBannerAdSize(MediaQuery.of(context).size.width.truncate());      if (size == null) {        debugPrint('Unable to get adaptive banner size.');        return;      }      final BannerAd banner = BannerAd(        size: size,        adUnitId: adUnitId,        listener: BannerAdListener(          onAdLoaded: (Ad ad) {            debugPrint('Ad loaded.');            setState(() {              var banner = ad as BannerAd;              bannerHeight = banner.size.height;              _adWidget = AdWidget(ad: banner);              _isBannerAdReady = true;            });          },          onAdFailedToLoad: (Ad ad, LoadAdError error) {            debugPrint('Ad failed to load: $error');            ad.dispose();          },        ),        request: const AdRequest(extras: {"collapsible": "bottom"}),      );      banner.load();    }  }  @override  void didChangeDependencies() {    super.didChangeDependencies();    _loadAd();  }  @override  Widget build(BuildContext context) {    return Obx(() {      return AnnotatedRegion<SystemUiOverlayStyle>(          value: const SystemUiOverlayStyle(            statusBarColor: Colors.transparent,            statusBarIconBrightness: Brightness.dark,            statusBarBrightness: Brightness.dark,          ),child: Scaffold(        backgroundColor: AppColors.background(context),        body: Stack(          children: [            Padding(              padding: EdgeInsets.only(                bottom:                    MediaQuery.of(context).padding.bottom +                    (controller.isPremium.value == false && AdManager.instance?.config?.isAdStatus == true&& AdManager.instance?.config?.isNativeAdStatus == true ? (_isBannerAdReady ? bannerHeight.toDouble() : 65) : 0),              ),              child: Column(                mainAxisSize: MainAxisSize.max,                children: [                  Stack(                    children: [                      Image.asset('assets/ic_toolbar_bg.webp', fit: BoxFit.fitWidth),                      Positioned(                        left: context.isTabletSize ? 250.sp : 100.sp,                        top: MediaQuery.of(context).padding.top + 12.sp,                        bottom: 12.sp,                        right: context.isTabletSize ? 250.sp : 100.sp,                        child: Image.asset('assets/ic_toolbar_app_title.webp', height: 65.sp, fit: BoxFit.contain),                      ),                      Positioned(                        left: context.isTabletSize ?36.sp:12.sp,                        top: MediaQuery.of(context).padding.top + 12.sp,                        bottom: 12.sp,                        child: GestureDetector(                          onTap: () {                            Get.to(ScreenSettings());                          },                          child: Image.asset(                            'assets/icons/ic_action_settings.webp',                            width: context.isTabletSize ? 100.sp : 56.sp,                            height: context.isTabletSize ? 100.sp : 56.sp,                            fit: BoxFit.contain,                          ),                        ),                      ),                    ],                  ),                  Expanded(                    child: Scrollbar(                      thumbVisibility: false,                      child: Padding(                        padding: EdgeInsets.all(12.0),                        child: GridView.count(                          padding: EdgeInsets.zero,                          crossAxisCount: context.isTabletSize ? 3 : 2,                          crossAxisSpacing: 12,                          mainAxisSpacing: 12,                          childAspectRatio: 0.87,                          children: [                            buildCategory('ic_category_hair_clipper', 'hair_clipper', AppLocalizations.of(context)?.category_hair_clipper ?? ''),                            buildCategory('ic_category_hair_cut', 'hair_cut', AppLocalizations.of(context)?.category_hair_cut ?? ''),                            buildCategory('ic_category_taser', 'taser', AppLocalizations.of(context)?.category_taser ?? ''),                            buildCategory('ic_category_gun', 'gun', AppLocalizations.of(context)?.category_gun ?? ''),                            buildCategory('ic_category_fart', 'fart', AppLocalizations.of(context)?.category_fart ?? ''),                            buildCategory('ic_category_bomb_sound', 'bomb_sound', AppLocalizations.of(context)?.category_bomb_sound ?? ''),                            buildCategory('ic_category_animals', 'animals', AppLocalizations.of(context)?.category_animals ?? ''),                            buildCategory('ic_category_air_horn', 'air_horn', AppLocalizations.of(context)?.category_air_horn ?? ''),                            buildCategory('ic_category_horror_sound', 'horror_sound', AppLocalizations.of(context)?.category_horror_sound ?? ''),                            buildCategory('ic_category_police_siren', 'police_siren', AppLocalizations.of(context)?.category_police_siren ?? ''),                          ],                        ),                      ),                    ),                  ),                ],              ),            ),            if (controller.isPremium.value == false && AdManager.instance?.config?.isAdStatus == true && AdManager.instance?.config?.isNativeAdStatus == true)              if (_isBannerAdReady && _adWidget != null)                Positioned(                  bottom: MediaQuery.of(context).padding.bottom,                  left: 0,                  right: 0,                  child: SizedBox(width: context.screenWidth, height: bannerHeight.toDouble(), child: _adWidget),                )              else                Positioned(                  bottom: MediaQuery.of(context).padding.bottom,                  left: 0,                  right: 0,                  child: Container(height: 65, color: AppColors.card(context)),                ),          ],        ),      ));    });  }  Widget buildCategory(String icon, String key, String title) {    return GestureDetector(      onTap: () {        goto(key);      },      child: ClipRRect(        borderRadius: BorderRadius.circular(24.sp),        child: Container(          color: AppColors.categoryCard,          child: Stack(            children: [              Image.asset('assets/categories/ic_category_bg.webp'),              Positioned.fill(child: Image.asset('assets/categories/$icon.webp', fit: BoxFit.cover)),              Align(                alignment: Alignment.bottomCenter,                child: Stack(                  alignment: Alignment.center,                  children: [                    Image.asset('assets/categories/ic_category_bg_label.webp', fit: BoxFit.fitWidth),                    Positioned.fill(                      child: Padding(                        padding: EdgeInsets.only(top: 12.sp),                        child: Center(                          child: Text(title, style: AppTextStyles.accentButtonText(context), textAlign: TextAlign.center),                        ),                      ),                    ),                  ],                ),              ),            ],          ),        ),      ),    );  }  void goto(String category) {    Get.to(ScreenCategoryItem(category: category, isPlayer: false));  }  @override  void dispose() {    _adWidget = null;    _lifecycleHandler.dispose();    super.dispose();  }}