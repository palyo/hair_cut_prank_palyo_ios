import 'dart:async';import 'package:flutter/material.dart';import 'package:flutter_screenutil/flutter_screenutil.dart';import 'package:get/get_core/src/get_main.dart';import 'package:get/get_instance/get_instance.dart';import 'package:get_storage/get_storage.dart';import 'package:google_mobile_ads/google_mobile_ads.dart';import 'package:prankers/adModule/AdManager.dart';import 'package:prankers/adModule/AdStateController.dart';import 'package:prankers/extensions/app_colors.dart';import 'package:prankers/extensions/app_text_styles.dart';import 'package:prankers/provider/MainController.dart';import 'package:shared_preferences/shared_preferences.dart';class InterAd {  static final InterAd _instance = InterAd._internal();  factory InterAd() => _instance;  InterAd._internal();  final controller = Get.find<MainController>();  InterstitialAd? _interstitialAd;  bool _isLoadingAd = false;  bool get isAdAvailable => _interstitialAd != null;  Future<void> preloadAd() async {    if (_isLoadingAd || _interstitialAd != null) return;    AdManager.instance?.config ??= await AdManager.instance?.getAdConfig();    if (AdManager.instance?.config?.isInterAdStatus == false) return;    _isLoadingAd = true;    InterstitialAd.load(      adUnitId: AdManager.instance?.config?.inter ?? '',      request: const AdRequest(),      adLoadCallback: InterstitialAdLoadCallback(        onAdLoaded: (ad) {          _interstitialAd = ad;          _isLoadingAd = false;          debugPrint("Interstitial ad preloaded");        },        onAdFailedToLoad: (error) {          debugPrint("Interstitial failed to preload: $error");          _isLoadingAd = false;        },      ),    );  }  Future<bool> isShowInterThisTime() async {    var prefs = await SharedPreferences.getInstance();    var interCount = prefs.getInt("COUNT_INTERID_ADTYPE") ?? 0;    prefs.setInt("COUNT_INTERID_ADTYPE", interCount + 1);    var type =        (AdManager.instance?.config?.interShowType ?? "ON")            .replaceAll("-BACKOFF", "")            .split("-")            .map((value) => value == "ON")            .toList();    var mod = interCount % type.length;    return type[mod];  }  Future<bool> isShowInterInitialFlowThisTime() async {    var prefs = await SharedPreferences.getInstance();    var interCount = prefs.getInt("COUNT_INTER_INITIAL_ID_ADTYPE") ?? 0;    prefs.setInt("COUNT_INTER_INITIAL_ID_ADTYPE", interCount + 1);    var type =        (AdManager.instance?.config?.interShowType ?? "ON")            .replaceAll("-BACKOFF", "")            .split("-")            .map((value) => value == "ON")            .toList();    var mod = interCount % type.length;    return type[mod];  }  Future<void> showAd(BuildContext context, VoidCallback onFinished) async {    if (!(AdManager.instance?.config?.isAdStatus ?? false) || controller.isPremium.value) {      onFinished();      return;    }    if (!await isShowInterThisTime()) {      onFinished();      return;    }    if (_interstitialAd != null) {      AdStateController.instance.isShowingInterstitial = true;      _interstitialAd?.fullScreenContentCallback = FullScreenContentCallback(        onAdDismissedFullScreenContent: (ad) {          ad.dispose();          _interstitialAd = null;          preloadAd();          onFinished();          Future.delayed(const Duration(milliseconds: 700), () {            AdStateController.instance.isShowingInterstitial = false;          });        },        onAdFailedToShowFullScreenContent: (ad, err) {          ad.dispose();          _interstitialAd = null;          preloadAd();          onFinished();          Future.delayed(const Duration(milliseconds: 700), () {            AdStateController.instance.isShowingInterstitial = false;          });        },      );      _interstitialAd?.show();    } else {      await _showLoadingDialogWithTimeout(context, onFinished);    }  }  Future<void> showInitialFlowAd(BuildContext context, VoidCallback onFinished) async {    if (!(AdManager.instance?.config?.isAdStatus ?? false) || controller.isPremium.value) {      onFinished();      return;    }    if (!await isShowInterInitialFlowThisTime()) {      onFinished();      return;    }    if (_interstitialAd != null) {      AdStateController.instance.isShowingInterstitial = true;      _interstitialAd?.fullScreenContentCallback = FullScreenContentCallback(        onAdDismissedFullScreenContent: (ad) {          ad.dispose();          _interstitialAd = null;          preloadAd();          onFinished();          Future.delayed(const Duration(milliseconds: 700), () {            AdStateController.instance.isShowingInterstitial = false;          });        },        onAdFailedToShowFullScreenContent: (ad, err) {          ad.dispose();          _interstitialAd = null;          preloadAd();          onFinished();          Future.delayed(const Duration(milliseconds: 700), () {            AdStateController.instance.isShowingInterstitial = false;          });        },      );      _interstitialAd?.show();    } else {      await _showLoadingDialogWithTimeout(context, onFinished);    }  }  Future<void> showForceAd(BuildContext context, VoidCallback onFinished) async {    if (!(AdManager.instance?.config?.isAdStatus ?? false) || controller.isPremium.value) {      onFinished();      return;    }    if (_interstitialAd != null) {      AdStateController.instance.isShowingInterstitial = true;      _interstitialAd?.fullScreenContentCallback = FullScreenContentCallback(        onAdDismissedFullScreenContent: (ad) {          ad.dispose();          _interstitialAd = null;          preloadAd();          onFinished();          Future.delayed(const Duration(milliseconds: 700), () {            AdStateController.instance.isShowingInterstitial = false;          });        },        onAdFailedToShowFullScreenContent: (ad, err) {          ad.dispose();          _interstitialAd = null;          preloadAd();          onFinished();          Future.delayed(const Duration(milliseconds: 700), () {            AdStateController.instance.isShowingInterstitial = false;          });        },      );      _interstitialAd?.show();    } else {      await _showLoadingDialogWithTimeout(context, onFinished);    }  }  Future<void> _showLoadingDialogWithTimeout(BuildContext context, VoidCallback onFinished) async {    bool adShown = false;    showDialog(      context: context,      barrierDismissible: false,      barrierColor: AppColors.background(context),      builder:          (_) => Dialog(            backgroundColor: Colors.transparent,            elevation: 0,            child: Center(              child: SizedBox(                width: 120,                child: Column(                  mainAxisSize: MainAxisSize.min,                  children: [                    SizedBox(                      width: 24.sp,                      height: 24.sp,                      child: CircularProgressIndicator(                        color: AppColors.accent(context),                        strokeWidth: 2.sp,                      ),                    ),                    SizedBox(height: 16),                    Text(                      'Ad loading...',                      style: AppTextStyles.bodyText1(context),                      textAlign: TextAlign.center,                    ),                  ],                ),              ),            ),          ),    );    InterstitialAd.load(      adUnitId: AdManager.instance?.config?.inter ?? '',      request: const AdRequest(),      adLoadCallback: InterstitialAdLoadCallback(        onAdLoaded: (ad) {          if (adShown) return;          Navigator.of(context, rootNavigator: true).pop(); // Close dialog          adShown = true;          _interstitialAd = ad;          showAd(context, onFinished);        },        onAdFailedToLoad: (err) {          if (!adShown) {            Navigator.of(context, rootNavigator: true).pop(); // Close dialog            adShown = true;            onFinished(); // Fallback          }        },      ),    );    await Future.delayed(const Duration(seconds: 3));    if (!adShown) {      Navigator.of(context, rootNavigator: true).pop(); // Close dialog      adShown = true;      onFinished(); // Fallback    }  }}